# Gomoku Game - Cursor Context File

## Project Overview

A modular implementation of Gomoku (Five-in-a-Row) in C with AI opponent using minimax algorithm with alpha-beta pruning. Originally refactored from a monolithic 1200+ line main.c file into clean, maintainable modules.

## Architecture

### Core Modules

- **`src/main.c`** - Simple orchestrator (105 lines, down from 1200+)
- **`src/game.c/.h`** - Game state, move history, timing, win detection
- **`src/ai.c/.h`** - Minimax with alpha-beta pruning, move ordering, timeout support
- **`src/ui.c/.h`** - Display, keyboard input, screen management, Unicode rendering
- **`src/board.c/.h`** - Board management, coordinate utilities, boundary checks
- **`src/cli.c/.h`** - Command-line argument parsing with getopt
- **`src/gomoku.c/.h`** - Core evaluation functions, threat matrix, pattern recognition

### Key Data Structures

```c
typedef struct {
    int board_size;           // 15x15 or 19x19
    int max_depth;           // AI search depth (2/4/6)
    int move_timeout;        // Move timeout in seconds
    bool show_help;          // CLI help flag
} cli_config_t;

typedef struct {
    int **board;             // 2D board array
    int current_player;      // AI_CELL_CROSSES (human) or AI_CELL_NAUGHTS (AI)
    game_state_enum game_state; // GAME_RUNNING, GAME_WON, GAME_QUIT
    move_t *move_history;    // Move history for undo
    char **ai_history;       // AI analysis history
    // ... timing, display, and state fields
} game_state_t;
```

## Build System & Dependencies

### Requirements

- **C Compiler**: GCC or Clang with C99 support
- **Make**: Standard build system
- **Google Test**: C++ testing framework (auto-downloaded in CI)
- **Platform**: macOS/Linux (cross-platform compatible)

### Build Commands

```bash
make            # Build the game
make test       # Run unit tests
make clean      # Clean build artifacts
make run        # Build and run with default settings
```

### CLI Options

```bash
./gomoku --level easy|medium|hard    # Set difficulty (depth 2/4/6)
./gomoku --depth N                   # Custom search depth
./gomoku --timeout N                 # Move timeout in seconds
./gomoku --board 15|19               # Board size
./gomoku --help                      # Show help
```

## AI Algorithm Details

### Minimax Implementation

- **Algorithm**: Minimax with alpha-beta pruning
- **Evaluation**: Pattern-based scoring with threat detection
- **Move Ordering**: Strategic positions first for better pruning
- **Timeout Support**: Graceful degradation when time limit reached
- **Threat Matrix**: Pre-computed evaluation patterns

### Performance Targets

- **Easy (depth 2)**: <0.1 seconds
- **Medium (depth 4)**: 0.1-0.5 seconds  
- **Hard (depth 6)**: 0.5-3 seconds

### Key Evaluation Patterns

- Five in a row: 1,000,000 points
- Open four: 10,000 points
- Four with one end blocked: 1,000 points
- Open three: 1,000 points
- Pattern recognition for threats and opportunities

## Testing Framework

### Test Structure

- **Framework**: Google Test (C++)
- **Location**: `tests/gomoku_test.cpp`
- **Coverage**: 20 comprehensive tests
- **CI Integration**: GitHub Actions on macOS and Ubuntu

### Key Test Categories

- Board initialization and boundary checking
- Win condition detection (horizontal, vertical, diagonal)
- AI move evaluation and minimax correctness
- Game state management and move history
- Input validation and error handling

### Running Tests

```bash
make test                    # Local testing
# CI automatically runs on push to any branch
# PR testing only on main branch
```

## User Interface

### Display Features

- **Unicode Rendering**: Clean visual board representation
- **Color Support**: Different colors for human/AI pieces
- **Real-time Updates**: Move timer, position evaluation
- **Move History**: Visual history panel with timestamps
- **Status Messages**: Game state, AI analysis, help text

### Controls

- **Arrow Keys**: Navigate cursor
- **Enter/Space**: Place stone
- **U**: Undo last move pair
- **?**: Show game rules and help
- **ESC**: Quit game

## Development Guidelines

### Code Style

- **Naming**: snake_case for functions and variables
- **Headers**: Proper separation of interface (.h) and implementation (.c)
- **Error Handling**: Consistent error checking and cleanup
- **Memory Management**: Proper allocation/deallocation patterns

### Module Dependencies

```
main.c
├── cli.c (command line parsing)
├── game.c (depends on board.c, gomoku.c)
├── ui.c (depends on game.c)
└── ai.c (depends on game.c, gomoku.c)
```

### Adding New Features

1. **Evaluate Module**: Determine which module should contain the feature
2. **Update Headers**: Add function declarations to appropriate .h file
3. **Implement**: Add implementation to corresponding .c file
4. **Test**: Add unit tests in `tests/gomoku_test.cpp`
5. **Document**: Update help text in `ui.c` if user-facing

### Performance Considerations

- **AI Timeout**: Always respect move_timeout to maintain responsive gameplay
- **Memory Usage**: Board scales O(n²), move history grows linearly
- **Search Depth**: Each depth level exponentially increases computation time
- **Pattern Matching**: Threat matrix lookup is O(1) for common patterns

## Continuous Integration

### GitHub Actions Workflow

- **Triggers**: Push to any branch, PR to main
- **Platforms**: Ubuntu and macOS testing
- **Steps**: Google Test build, project compilation, test execution, CLI testing
- **Validation**: Memory leak detection with Valgrind (Ubuntu only)

### CI Configuration Notes

- Google Test cloned fresh if not present
- Cross-platform compatibility verified
- Binary execution tested with various CLI flags
- Build artifacts not cached (fresh build each time)

## File Structure Context

```
gomoku-c/
├── src/                 # All source code
├── tests/              # Google Test framework and test files
├── .github/workflows/  # CI/CD configuration
├── Makefile           # Build configuration
├── README.md          # User and developer documentation
└── .cursor            # This context file
```

## Known Technical Debt & Future Improvements

- Consider adding opening book for stronger early game
- Implement iterative deepening for better time management
- Add save/load game functionality
- Support for custom board sizes beyond 15x15 and 19x19
- Network multiplayer support
- Performance profiling and optimization

## Debugging Tips

- Use `make clean && make` for clean builds
- Enable compiler warnings: `-Wall -Wextra` in Makefile
- Memory debugging: `valgrind ./gomoku` on Linux
- AI analysis: Check ai_history array for move evaluations
- Test specific scenarios: Modify board state in unit tests
